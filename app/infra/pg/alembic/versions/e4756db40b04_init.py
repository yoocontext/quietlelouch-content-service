"""init

Revision ID: e4756db40b04
Revises: 
Create Date: 2025-05-25 22:09:13.445545

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e4756db40b04'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('authors',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('bio', sa.String(), nullable=True),
    sa.Column('uid', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('name')
    )
    op.create_table('languages',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('pk', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('pk')
    )
    op.create_table('roles',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('uid', sa.Uuid(), nullable=False),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('name')
    )
    op.create_table('tags',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('uid', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('name')
    )
    op.create_table('titles',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('pk', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('pk'),
    sa.UniqueConstraint('name')
    )
    op.create_table('gifs',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=False),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=False),
    sa.Column('media_type', sa.String(), nullable=False),
    sa.Column('nsfw', sa.Boolean(), nullable=False),
    sa.Column('added_by', sa.Uuid(), nullable=False, comment='foreign key to UserOrm from User Service'),
    sa.Column('author_uid', sa.Uuid(), nullable=True),
    sa.Column('title_pk', sa.Integer(), nullable=True),
    sa.Column('language_pk', sa.Integer(), nullable=True),
    sa.Column('uid', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['author_uid'], ['authors.uid'], ),
    sa.ForeignKeyConstraint(['language_pk'], ['languages.pk'], ),
    sa.ForeignKeyConstraint(['title_pk'], ['titles.pk'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('images',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=False),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('media_type', sa.String(), nullable=False),
    sa.Column('nsfw', sa.Boolean(), nullable=False),
    sa.Column('added_by', sa.Uuid(), nullable=False, comment='foreign key to UserOrm from User Service'),
    sa.Column('author_uid', sa.Uuid(), nullable=True),
    sa.Column('title_pk', sa.Integer(), nullable=True),
    sa.Column('language_pk', sa.Integer(), nullable=True),
    sa.Column('uid', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['author_uid'], ['authors.uid'], ),
    sa.ForeignKeyConstraint(['language_pk'], ['languages.pk'], ),
    sa.ForeignKeyConstraint(['title_pk'], ['titles.pk'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('mangas',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('pages_count', sa.Integer(), nullable=False),
    sa.Column('media_type', sa.String(), nullable=False),
    sa.Column('nsfw', sa.Boolean(), nullable=False),
    sa.Column('added_by', sa.Uuid(), nullable=False, comment='foreign key to UserOrm from User Service'),
    sa.Column('translated_by', sa.Uuid(), nullable=True, comment='foreign key to UserOrm from User Service'),
    sa.Column('title_pk', sa.Integer(), nullable=True),
    sa.Column('author_uid', sa.Uuid(), nullable=True),
    sa.Column('language_pk', sa.Integer(), nullable=False),
    sa.Column('uid', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['author_uid'], ['authors.uid'], ),
    sa.ForeignKeyConstraint(['language_pk'], ['languages.pk'], ),
    sa.ForeignKeyConstraint(['title_pk'], ['titles.pk'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('videos',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=False),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=False),
    sa.Column('media_type', sa.String(), nullable=False),
    sa.Column('nsfw', sa.Boolean(), nullable=False),
    sa.Column('added_by', sa.Uuid(), nullable=False, comment='foreign key to UserOrm from User Service'),
    sa.Column('author_uid', sa.Uuid(), nullable=True),
    sa.Column('title_pk', sa.Integer(), nullable=True),
    sa.Column('language_pk', sa.Integer(), nullable=True),
    sa.Column('uid', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['author_uid'], ['authors.uid'], ),
    sa.ForeignKeyConstraint(['language_pk'], ['languages.pk'], ),
    sa.ForeignKeyConstraint(['title_pk'], ['titles.pk'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('a_gifs_roles',
    sa.Column('gif_uid', sa.Uuid(), nullable=False),
    sa.Column('role_pk', sa.Uuid(), nullable=False),
    sa.Column('pk', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['gif_uid'], ['gifs.uid'], ),
    sa.ForeignKeyConstraint(['role_pk'], ['roles.uid'], ),
    sa.PrimaryKeyConstraint('gif_uid', 'role_pk', 'pk')
    )
    op.create_table('a_gifs_tags',
    sa.Column('gif_uid', sa.Uuid(), nullable=False),
    sa.Column('tag_pk', sa.Uuid(), nullable=False),
    sa.Column('pk', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['gif_uid'], ['gifs.uid'], ),
    sa.ForeignKeyConstraint(['tag_pk'], ['tags.uid'], ),
    sa.PrimaryKeyConstraint('gif_uid', 'tag_pk', 'pk')
    )
    op.create_table('a_images_roles',
    sa.Column('image_uid', sa.Uuid(), nullable=False),
    sa.Column('role_pk', sa.Uuid(), nullable=False),
    sa.Column('pk', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['image_uid'], ['images.uid'], ),
    sa.ForeignKeyConstraint(['role_pk'], ['roles.uid'], ),
    sa.PrimaryKeyConstraint('image_uid', 'role_pk', 'pk')
    )
    op.create_table('a_images_tags',
    sa.Column('image_uid', sa.Uuid(), nullable=False),
    sa.Column('tag_pk', sa.Uuid(), nullable=False),
    sa.Column('pk', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['image_uid'], ['images.uid'], ),
    sa.ForeignKeyConstraint(['tag_pk'], ['tags.uid'], ),
    sa.PrimaryKeyConstraint('image_uid', 'tag_pk', 'pk')
    )
    op.create_table('a_manga_roles',
    sa.Column('manga_uid', sa.Uuid(), nullable=False),
    sa.Column('role_pk', sa.Uuid(), nullable=False),
    sa.Column('pk', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['manga_uid'], ['mangas.uid'], ),
    sa.ForeignKeyConstraint(['role_pk'], ['roles.uid'], ),
    sa.PrimaryKeyConstraint('manga_uid', 'role_pk', 'pk')
    )
    op.create_table('a_manga_tags',
    sa.Column('manga_uid', sa.Uuid(), nullable=False),
    sa.Column('tag_pk', sa.Uuid(), nullable=False),
    sa.Column('pk', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['manga_uid'], ['mangas.uid'], ),
    sa.ForeignKeyConstraint(['tag_pk'], ['tags.uid'], ),
    sa.PrimaryKeyConstraint('manga_uid', 'tag_pk', 'pk')
    )
    op.create_table('a_videos_roles',
    sa.Column('gif_uid', sa.Uuid(), nullable=False),
    sa.Column('role_pk', sa.Uuid(), nullable=False),
    sa.Column('pk', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['gif_uid'], ['videos.uid'], ),
    sa.ForeignKeyConstraint(['role_pk'], ['roles.uid'], ),
    sa.PrimaryKeyConstraint('gif_uid', 'role_pk', 'pk')
    )
    op.create_table('a_videos_tags',
    sa.Column('gif_uid', sa.Uuid(), nullable=False),
    sa.Column('tags_pk', sa.Uuid(), nullable=False),
    sa.Column('pk', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['gif_uid'], ['videos.uid'], ),
    sa.ForeignKeyConstraint(['tags_pk'], ['tags.uid'], ),
    sa.PrimaryKeyConstraint('gif_uid', 'tags_pk', 'pk')
    )
    op.create_table('pages',
    sa.Column('height', sa.Integer(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=False),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('page_number', sa.Integer(), nullable=False),
    sa.Column('manga_uid', sa.Uuid(), nullable=False),
    sa.Column('uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['manga_uid'], ['mangas.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('pages')
    op.drop_table('a_videos_tags')
    op.drop_table('a_videos_roles')
    op.drop_table('a_manga_tags')
    op.drop_table('a_manga_roles')
    op.drop_table('a_images_tags')
    op.drop_table('a_images_roles')
    op.drop_table('a_gifs_tags')
    op.drop_table('a_gifs_roles')
    op.drop_table('videos')
    op.drop_table('mangas')
    op.drop_table('images')
    op.drop_table('gifs')
    op.drop_table('titles')
    op.drop_table('tags')
    op.drop_table('roles')
    op.drop_table('languages')
    op.drop_table('authors')
    # ### end Alembic commands ###
